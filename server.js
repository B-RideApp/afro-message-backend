import 'dotenv/config';
import express from "express";
import fetch from "node-fetch";
import rateLimit from "express-rate-limit";
import helmet from "helmet";
import cors from "cors";

const app = express();

// Security middleware
app.use(helmet());
app.use(cors({
  origin: process.env.ALLOWED_ORIGINS?.split(',') || ['http://localhost:3000'],
  credentials: true
}));

// Rate limiting
const otpLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5, // Limit each IP to 5 OTP requests per windowMs
  message: {
    error: "Too many OTP requests, please try again later",
    retryAfter: "15 minutes"
  },
  standardHeaders: true,
  legacyHeaders: false,
});

app.use(express.json({ limit: '10mb' }));

// Health check (no auth required)
app.get("/", (req, res) => {
  res.json({
    status: "healthy",
    message: "B-RIDE AfroMessage Backend is running 🚀",
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// Health check with details
app.get("/health", (req, res) => {
  const afroToken = process.env.AFROMESSAGE_TOKEN;
  const afroId = process.env.AFROMESSAGE_IDENTIFIER_ID;
  
  res.json({
    status: "healthy",
    credentials: {
      afromessage_token: afroToken ? "configured" : "missing",
      afromessage_identifier: afroId ? "configured" : "missing"
    },
    timestamp: new Date().toISOString()
  });
});

// Send OTP endpoint
app.post("/send-otp", otpLimiter, async (req, res) => {
  const { phone, length = 6 } = req.body;

  // Input validation
  if (!phone) {
    return res.status(400).json({ 
      error: "Phone number is required"
    });
  }

  // Validate phone format (basic validation)
  const phoneRegex = /^\+?[1-9]\d{1,14}$/;
  if (!phoneRegex.test(phone)) {
    return res.status(400).json({ 
      error: "Invalid phone number format",
      details: "Phone should be in international format (+1234567890)"
    });
  }

  // Validate OTP length
  if (length < 4 || length > 8) {
    return res.status(400).json({ 
      error: "Invalid OTP length",
      details: "OTP length should be between 4 and 8 digits"
    });
  }

  // Check environment variables
  const afroToken = process.env.AFROMESSAGE_TOKEN;
  const afroId = process.env.AFROMESSAGE_IDENTIFIER_ID;
  const senderName = process.env.AFROMESSAGE_SENDER_NAME || '';
  
  if (!afroToken || !afroId) {
    console.error('❌ Missing AfroMessage credentials');
    return res.status(500).json({ 
      error: "Server configuration error",
      details: "AfroMessage credentials not configured"
    });
  }

  try {
    console.log(`📱 Sending OTP to ${phone.substring(0, 4)}****`);
    
    // Build AfroMessage challenge API URL according to documentation
    const queryParams = new URLSearchParams({
      from: afroId,
      to: phone,
      len: length.toString(),
      t: '0', // 0 for number only codes
      pr: 'Your PedalFly verification code is ', // Message prefix
      ps: '. This code expires in 10 minutes.', // Message postfix
      sb: '0', // Spaces before code
      sa: '0', // Spaces after code
      ttl: '600' // 10 minutes expiration
    });

    // Add sender name if available
    if (senderName) {
      queryParams.append('sender', senderName);
    }

    const apiUrl = `https://api.afromessage.com/api/challenge?${queryParams}`;
    console.log(`🔗 API URL: ${apiUrl}`);

    const response = await fetch(apiUrl, {
      method: "GET",
      headers: {
        "Authorization": `Bearer ${afroToken}`,
        "Content-Type": "application/json"
      }
    });

    console.log(`📊 Response status: ${response.status}`);
    
    let result;
    try {
      result = await response.json();
    } catch (jsonError) {
      const textResponse = await response.text();
      console.error('❌ Non-JSON response:', textResponse.substring(0, 200));
      throw new Error('Invalid API response format');
    }
    
    console.log('📄 Response:', result);
    
    // Check if AfroMessage request was successful
    if (result.acknowledge !== 'success') {
      console.error('❌ AfroMessage API error:', result);
      return res.status(400).json({
        error: "Failed to send OTP",
        details: result.response || "AfroMessage service error"
      });
    }

    console.log(`✅ OTP sent successfully to ${phone.substring(0, 4)}****`);
    console.log(`🔑 Generated OTP: ${result.response.code}`);
    
    // Return success with the generated OTP and verification ID
    res.json({
      success: true,
      message: "OTP sent successfully",
      messageId: result.response.message_id,
      otp: result.response.code, // The actual OTP code generated by AfroMessage
      verificationId: result.response.verificationId, // For verification later
      timestamp: new Date().toISOString()
    });
    
  } catch (err) {
    console.error('❌ Error sending OTP:', err);
    res.status(500).json({ 
      error: "Failed to send OTP",
      details: "Internal server error"
    });
  }
});

// Verify OTP endpoint (using AfroMessage verification)
app.post("/verify-otp", async (req, res) => {
  const { phone, code, verificationId } = req.body;

  // Input validation
  if (!phone || !code) {
    return res.status(400).json({ 
      error: "Phone number and code are required"
    });
  }

  // Check environment variables
  const afroToken = process.env.AFROMESSAGE_TOKEN;
  
  if (!afroToken) {
    console.error('❌ Missing AfroMessage credentials');
    return res.status(500).json({ 
      error: "Server configuration error",
      details: "AfroMessage credentials not configured"
    });
  }

  try {
    console.log(`🔍 Verifying OTP for ${phone.substring(0, 4)}****`);
    
    // Build AfroMessage verify API URL
    const queryParams = new URLSearchParams({
      to: phone,
      code: code
    });

    // Add verification ID if available (more secure)
    if (verificationId) {
      queryParams.set('vc', verificationId);
    }

    const apiUrl = `https://api.afromessage.com/api/verify?${queryParams}`;
    console.log(`🔗 Verify URL: ${apiUrl}`);

    const response = await fetch(apiUrl, {
      method: "GET",
      headers: {
        "Authorization": `Bearer ${afroToken}`,
        "Content-Type": "application/json"
      }
    });

    console.log(`📊 Verify response status: ${response.status}`);
    
    let result;
    try {
      result = await response.json();
    } catch (jsonError) {
      const textResponse = await response.text();
      console.error('❌ Non-JSON response:', textResponse.substring(0, 200));
      throw new Error('Invalid API response format');
    }
    
    console.log('📄 Verify response:', result);
    
    // Check if verification was successful
    if (result.acknowledge === 'success') {
      console.log(`✅ OTP verified successfully for ${phone.substring(0, 4)}****`);
      
      res.json({
        success: true,
        message: "OTP verified successfully",
        phone: result.response.phone,
        verificationId: result.response.verificationId,
        timestamp: new Date().toISOString()
      });
    } else {
      console.log(`❌ OTP verification failed for ${phone.substring(0, 4)}****`);
      
      res.status(400).json({
        success: false,
        error: "Invalid verification code",
        details: result.response || "Code verification failed"
      });
    }
    
  } catch (err) {
    console.error('❌ Error verifying OTP:', err);
    res.status(500).json({ 
      error: "Failed to verify OTP",
      details: "Internal server error"
    });
  }
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error('❌ Unhandled error:', err);
  res.status(500).json({
    error: "Internal server error",
    timestamp: new Date().toISOString()
  });
});

// 404 handler
app.use((req, res) => {
  res.status(404).json({
    error: "Endpoint not found",
    path: req.path,
    method: req.method
  });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`🚀 B-RIDE Backend running on port ${PORT}`);
  console.log(`🌍 Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`📱 AfroMessage configured: ${process.env.AFROMESSAGE_TOKEN ? 'Yes' : 'No'}`);
});